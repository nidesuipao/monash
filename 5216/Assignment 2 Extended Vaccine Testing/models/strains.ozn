string: _mzn_solution_checker = "@eAGVVNuOmzAQfecrRn4yjRUl6aoPoTzQNJVW1WYjNkoq0WjlgNlFJRhhQ7a3f+8YA0paddtN\nxG3mzNhzzoyzIs7rRABRMm9EdV+JRKRZkelMFmp8/FYQz8kGjE7y7PCH9aWRoqiPsA0Wi+vV\n0nO6lzmUOY/FQXpOjAl0xbNCQyornuc04kqJStMO8tZvGCUNj+OswOSjEcKOXNPGdUcjArws\nBa8UHATaRZ/3c0Fc+AENZEW/+N41W9RzWHmOEhpkik78XN+uwYfpeIz21rC79O+Wy48WgI62\nmk24DDY3y9UGzd93wfWGbYNPbL0IWRhs2F2w+ek5vKr4V4gG6H7IF0uln/Mf8V4J/jyGP3WY\n/rPhT0MAVsTMrlv8ED0HFT+KpM7FObDFdOUO4liyeSuu52ihNGBo/IUepMzncGCoWFY8YEYX\nKchSOIB+FAXoqhYgciXwDWW4x0aQtaZkGYa34dxop1jK0e+CKJIs9RxZarBJleYP4j1aal3W\nGiLM2veDXVvVRxr1JUQlO+19H3lHlU9G5bZg1/dnr2JeJfS8hKjcu9hCfSzwIrkoERIJhdTA\nHyohzKpQyrLOW+dZw5Vtw3WdVZo1DX+uLZ28C+6uF/DhNrwJNqhxVYlYI9bSYRkwITZX6zAM\n7P+i8kAw8huRMWFki9carxCvO4JxHVE0ImB/ZD8aRepRnugJkqyB6cRs9IwcdJvt/yv2KJP/\niI0oKnTy/amtnxLkrFUYk9xjV9IZs4TNew66khESpdkTvZDSNSvYhLsuISUmHd7Q04/8b6J2\nelzmPxOHnVUwnD1maNdsO2XbGc5pd16gce05K3xcec7OjPvEHE3Y+Mj/hE0n7IrN2BvMYmcN\nzbP2vR1DA9oh4jVipgbTjbANxnD8T9BuexytZlA85xd9drxJ\n";
output ["\"output\": {","\"dzn\": ",showJSON(concat(["allcost = ",show(allcost),";\n","schedule = \n",let {array [int] of string: idx1 = [], array [int] of string: idx2 = [], array [int,int] of string: x = [(i, j) : _toString_TREATMENT(schedule[i,j],true,false) | i in 1..4, j in 1..10]} in (show2d_indexed(idx1,idx2,x)),";\n","vaccinations = ",_toString_VACCINE(vaccinations,true,false),";\n","pcost = ",show(pcost),";\n"])),"}, \"sections\": [\"dzn\"]"];
function string : _toString_VACCINE(array [$U] of set of VACCINE: x,bool: b,bool: json) = let {array [int] of set of VACCINE: xx = array1d(x)} in (("["++join(", ",[_toString_VACCINE(xx[i],b,json) | i in index_set(xx)]))++"]");
function string : _toString_VACCINE(set of VACCINE: x,bool: b,bool: json) = ((("{"++if json then "\"set\":[" else "" endif)++join(", ",[_toString_VACCINE(i,b,json) | i in x]))++if json then "]" else "" endif)++"}";
function string : _toString_VACCINE(opt int: x,bool: b,bool: json) = if occurs(x) then if b then showDznId(_enum_to_string_0_VACCINE[deopt(x)]) elseif json then ("{\"e\":"++show(_enum_to_string_0_VACCINE[deopt(x)]))++"}" else _enum_to_string_0_VACCINE[deopt(x)] endif else if json then "null" else "<>" endif endif;
function string : _toString_TREATMENT(opt int: x,bool: b,bool: json) = if occurs(x) then if b then showDznId(_enum_to_string_0_TREATMENT[deopt(x)]) elseif json then ("{\"e\":"++show(_enum_to_string_0_TREATMENT[deopt(x)]))++"}" else _enum_to_string_0_TREATMENT[deopt(x)] endif else if json then "null" else "<>" endif endif;
array [POP] of int: pcost;
set of int: VACCINE = 1..3;
array [1..3] of string: _enum_to_string_0_VACCINE = ["P","V1","V2"];
set of int: X_INTRODUCED_45_ = reverse_map_ab2si(X_INTRODUCED_175_);
function set of int : reverse_map_ab2si(array [int] of bool: b):: promise_total = {i | i in index_set(b) where b[i]};
array [1..3] of bool: X_INTRODUCED_175_ = [X_INTRODUCED_172_,X_INTRODUCED_173_,X_INTRODUCED_174_];
bool: X_INTRODUCED_174_;
bool: X_INTRODUCED_173_;
bool: X_INTRODUCED_172_;
set of int: X_INTRODUCED_44_ = reverse_map_ab2si(X_INTRODUCED_143_);
array [1..3] of bool: X_INTRODUCED_143_ = [X_INTRODUCED_140_,X_INTRODUCED_141_,X_INTRODUCED_142_];
bool: X_INTRODUCED_142_;
bool: X_INTRODUCED_141_;
bool: X_INTRODUCED_140_;
set of int: X_INTRODUCED_43_ = reverse_map_ab2si(X_INTRODUCED_111_);
array [1..3] of bool: X_INTRODUCED_111_ = [X_INTRODUCED_108_,X_INTRODUCED_109_,X_INTRODUCED_110_];
bool: X_INTRODUCED_110_;
bool: X_INTRODUCED_109_;
bool: X_INTRODUCED_108_;
set of int: X_INTRODUCED_42_ = reverse_map_ab2si(X_INTRODUCED_76_);
array [1..3] of bool: X_INTRODUCED_76_ = [X_INTRODUCED_73_,X_INTRODUCED_74_,X_INTRODUCED_75_];
bool: X_INTRODUCED_75_;
bool: X_INTRODUCED_74_;
bool: X_INTRODUCED_73_;
array [POP] of set of int: vaccinations:: mzn_check_var:: mzn_check_enum_var([{},VACCINE]) = [X_INTRODUCED_42_,X_INTRODUCED_43_,X_INTRODUCED_44_,X_INTRODUCED_45_];
array [1..5] of string: _enum_to_string_0_TREATMENT = ["WAIT","VAX","PCR","RAT","SAT"];
array [POP,WEEK] of int: schedule:: mzn_check_var:: mzn_check_enum_var([{},{},TREATMENT]);
int: allcost;
